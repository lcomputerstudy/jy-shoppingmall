할일

1. 디비 짜서 블로그 보고 나름 정규화 해보기
2. 관리자 목업페이지 3개 만들기
3. 이후 컴펌받고 계속 작업 진행 해나가기


------------------------------------------------------------------------------------------------------------------------------------------------
config 부분에 대한 설명

1. com.shoppingmall.example.comfig에 있는 클래스
   프로젝트를 할때 이 config를 그대로 가져와서 사용하면 된다.
   여기에 있는 클래스들은 "원래 xml로 설정하던 것들을 클래스를 사용해서 설정" 한 것이다.
   logback-spring.xml 같은 파일도 사실 클래스를 사용해서 설정 할 수 있다. 
   예전에는 대부분 xml로 설정을 했는데, 요즘은 이런식으로 클래스를 이용해서 설정을 하기도 한다.
   그래서 설정과 관련된 정보이기 때문에 다 외울 필요는 없다.
   이런 부분들은 회사가면, 팀장급이나 AA(아키텍쳐 어쩌고...)들이 미리 다 설정해 놓기에 직접 개발할 일은 거의 없다.
   개발자들은 주로 컨트롤러작업과 crud, 그리고 프론트 단 작업을 하게 된다. 
   
2. 나는 그냥 return userList; 이런식으로 return으로 받았었는데, 
   ResponseEntity<?> 을 이용해서 return new ResponseEntity<>(userList, HttpStatus.OK); 이런식으로 데이터를 리턴받아야 한다.
    
    
3. 시큐리티 + jwt 조합에서는 거의 rest방식이 사용된다. 참고로 rest방식을 잘 따를때 rest-ful하게 작업했다고 한다.


 ------------------------------------------------------------------------------------------------------------------------------------------------
 
 어노테이션
 
 @Bean: 개발자가 직접 제어가 불가능한 외부 라이브러리 또는 설정을 위한 클래스를 IoC컨테이너에 Bean으로 등록할 때, 
              개발자가 작성한 메소드를 통해 반환되는 객체를 Bean으로 만드는 어노테이션이다.
 
 @Configuration: @Bean을 제공하는 클래스에 붙여준다.
                 1개 이상의 @Bean을 제공하는 클래스의 경우 반드시 @Configuration을 명시해 주어야 함
 
 @Component: @Bean과 마찬가지로 빈을 등록하는 어노테이션이다. 
             @Bean과의 차이점은 개발자가 직접 개발한 "클래스"를 IoC컨테이너에 Bean으로 등록하고자 하는 경우 @Component 어노테이션을 사용한다.
             
 @Autowired: "각 상황의 타입에 맞는 IoC 컨테이너 안에 있는 Bean"을 자동으로 주입해주는 어노테이션이다.       
       
 ------------------------------------------------------------------------------------------------------------------------------------------------
 
 필수개념
 
 POJO(Plain Old Java Object): 순수하고 오래된 자바객체
 : 한마디로 정말 순수한 자바객체 그 자체를 뜻 한다.
 스프링에서는 이 POJO를 바로 "Bean" 이라고 부른다.
 
 Bean: 스프링에서는 POJO를 Bean이라고 부른다.         
 
 
 
 
 
 
 
 
 
     