<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shoppingmall.example.mapper.ProductMapper">
	 	 
	 <select id="imageByRank" resultType="Product">
		
		SELECT pi_unique AS image, ta.p_id as id, ta.order_count, tb.p_name AS name, tb.p_price as price

		FROM product_img
		
		LEFT JOIN  (SELECT p_id, SUM(od_count) order_count
						FROM order_detail
						GROUP BY p_id) ta
		ON ta.p_id = product_img.p_id
		
		LEFT JOIN product tb
		ON tb.p_id = ta.p_id
		
		ORDER BY order_count DESC
	  
	 </select>
	 
	 
	  <select id="imageLiving" resultType="Product">
		
		SELECT pi_unique AS image, ta.p_name AS name, ta.p_id as id
		
		FROM product_img
		
		JOIN (SELECT p_name, p_id
				   FROM product
				   WHERE p_category LIKE CONCAT(20, '%')) ta
					  
		ON product_img.p_id = ta.p_id
	  
	 </select>
	 
	 
	   <select id="imageRoom" resultType="Product">
		
		SELECT pi_unique AS image, ta.p_name AS name, ta.p_id as id
		
		FROM product_img
		
		JOIN (SELECT p_name, p_id
				   FROM product
				   WHERE p_category LIKE CONCAT(40, '%')) ta
					  
		ON product_img.p_id = ta.p_id
	  
	 </select>
	 
	  <select id="imageMaterials" resultType="Product">
		
		SELECT pi_unique AS image, ta.p_name AS name, ta.p_id as id
		
		FROM product_img
		
		JOIN (SELECT p_name, p_id
				   FROM product
				   WHERE p_category LIKE CONCAT(70, '%')) ta
					  
		ON product_img.p_id = ta.p_id
	  
	 </select>
	 
	 
	 <select id="salesbytime" parameterType="Category" resultType="Product">	
		SELECT 			order_detail.p_id, 
						sum(od_count) order_count, 
						tc.p_name as name
		FROM 			order_detail  
		
		JOIN 			(SELECT o_id 
						 FROM orders
						 WHERE o_date between DATE(#{date1}) AND DATE(#{date2}))ta		
		ON ta.o_id = order_detail.o_id 
		
		LEFT JOIN 		product tc  
		ON order_detail.p_id = tc.p_id
		
		group by p_id
	</select>
	 
	<select id="lowCgData" parameterType="int" resultType="Product">
		SELECT 					ta.p_id AS id, 
								tb.p_name as name, 
								sum(ta.od_count) AS order_count,
								tb.p_rank AS rank 
										
		FROM					order_detail ta 
		JOIN 					(SELECT 	p_category, p_id, p_name, p_rank 
								FROM 		product
								LEFT JOIN (SELECT cg_id as id 
										   FROM category 
										   WHERE cg_id LIKE CONCAT(#{id}, '%')) ta
								ON 1=1
								WHERE product.p_category= ta.id) tb
		ON 						ta.p_id = tb.p_id
		group by 				ta.p_id 
	</select>
	
	
	<select id="CgData_Date" parameterType="Category" resultType="Product">
		SELECT 				order_detail.p_id, 
							sum(od_count) order_count, 
							tc.p_name as NAME
		FROM 				order_detail
		
		JOIN 				(SELECT o_id
							 FROM orders
							 WHERE o_date between DATE(#{date1}) AND DATE(#{date2}))ta		
		ON ta.o_id = order_detail.o_id
		
		LEFT JOIN product tc
		ON order_detail.p_id = tc.p_id
		
		JOIN 				(SELECT 	p_category, p_id, p_name, p_rank 
							 FROM 		product
							 LEFT JOIN (SELECT cg_id as id FROM category WHERE cg_id LIKE CONCAT(#{cg_id}, '%')) ta
							 ON 1=1
							WHERE product.p_category= ta.id) td
		ON order_detail.p_id = td.p_id
		
		group by p_id
	
	</select>
	
	
	<select id="CgData_AllTime" parameterType="Category" resultType="Product">
		SELECT 				order_detail.p_id, 
							sum(od_count) order_count, 
							tc.p_name as NAME
		FROM 				order_detail
		
		JOIN 				(SELECT o_id
							 FROM orders
							 WHERE o_date between DATE(#{date1}) AND DATE(#{date2}))ta		
		ON ta.o_id = order_detail.o_id
		
		LEFT JOIN product tc
		ON order_detail.p_id = tc.p_id
		
		JOIN 				(SELECT 	p_category, p_id, p_name, p_rank 
							 FROM 		product
							 LEFT JOIN (SELECT cg_id as id FROM category) ta
							 ON 1=1
							WHERE product.p_category= ta.id) td
		ON order_detail.p_id = td.p_id
		
		group by p_id
	</select>
		
	<select id="lowCgData_all" parameterType="int" resultType="Product">
		SELECT 					ta.p_id AS id, 
								tb.p_name as name, 
								sum(ta.od_count) AS order_count,
								tb.p_rank AS rank 
								
		FROM					order_detail ta 
		LEFT JOIN 				product tb
		ON 						tb.p_id = ta.p_id
		group by 				ta.p_id 
	</select>

	<resultMap id="productData" type="Product">
	</resultMap>
	
	<resultMap id="productImage" type="Product_img">
	</resultMap>
 
 <!-- 
	<select id="readAllProduct" resultMap="productData, productImage">
		SELECT			product.p_id					        as 	id,
						p_name 							as 	name,
						p_price                         as  price,
						p_order_count					as	order_count,
						p_views                         as  views,	
						p_category                      as  category,
						p_quantity			            as  quantity,
						pi_unique                      as image,
						p_text                        as text
		FROM 			product 
		JOIN product_img ON (product.p_id = product_img.p_id);
	</select>
	 -->
	
	<select id="readAllProduct" resultMap="productData, productImage">
		SELECT			product.p_id					        as 	id,
						p_name 							as 	name,
						p_price                         as  price,
						ta.p_order_count					as	order_count,
						p_views                         as  views,	
						p_category                      as  category,
						p_quantity			            as  quantity,
						pi_unique                      as image,
						p_text                        as text
		FROM 			product 
		JOIN product_img 
		ON (product.p_id = product_img.p_id)
		left JOIN (SELECT SUM(od_count) p_order_count , p_id 
				FROM order_detail
				GROUP BY p_id) ta
		ON product.p_id = ta.p_id
	</select>
	
	<select id="readProduct" resultMap="productData, productImage">
		SELECT			product.p_id					        as 	id,
						p_name 							as 	name,
						p_price                         as  price,
						p_views                         as  views,	
						p_category                      as  category,
						p_quantity			            as  quantity,
						pi_unique                      as image,
						p_text                        as text
		FROM 			product
		JOIN product_img ON (product.p_id = product_img.p_id)
		WHERE product.p_id = #{id}
	</select>
	
	<insert id="createProduct" parameterType="Product" >      
		INSERT INTO product (
			p_id, 
			p_name, 
			p_price, 
			p_category, 
			p_quantity,
			p_views,
			p_text
		) VALUES (
			#{id}, 
			#{name}, 
			#{price}, 
			#{category},
			#{quantity},
			0,
			#{text}
		)
	</insert>

	<!-- id로 입력한 값이 product_img에도 id로 일단은 입력되도록 설정함. -->
	<insert id="createImage" parameterType="Product" >      
		INSERT INTO product_img (
			p_id, 
			pi_image, 
			pi_id,
			pi_unique
		) VALUES (
			#{id}, 
			#{image}, 
			#{id},
			#{unique}
		)
	</insert>

	<!-- 상품 삭제구현 -->
	<delete id="productDelete" parameterType="Product">
		DELETE FROM product where p_id=#{id}
	</delete>
	
	<delete id="product_img_Delete" parameterType="Product">
		DELETE FROM product_img where p_id=#{id}
	</delete>
	<!-- 상품정보 수정하기 -->
	<update id="productDataUpdate" parameterType="Product">
		update			product								set
						p_id = #{id},
						p_name = #{name},
						p_price = #{price},
						p_category = #{category},
						p_quantity = #{quantity},
						p_text = #{text}
							
						where p_id= #{id}		
	</update>
	
	<update id="productImgUpdate" parameterType="Product">
		update			product_img								set
						p_id = #{id},
						pi_image = #{image},
						pi_unique = #{unique},
						pi_id = #{id}
							
						where p_id= #{id}		
	</update>

</mapper>